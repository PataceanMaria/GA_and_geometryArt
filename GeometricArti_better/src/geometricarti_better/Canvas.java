/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package geometricarti_better;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Path2D;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author maria
 */
public class Canvas extends javax.swing.JFrame {

    /**
     * Creates new form Canvas
     */
    public Canvas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 102));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(146, 26, -1, 215));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 215, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(146, 278, -1, -1));

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 215, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(146, 523, -1, -1));

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 215, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 26, -1, -1));

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 278, -1, 215));

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 215, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 523, -1, -1));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("START");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 90, 30));

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("DELETE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 90, 30));

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("NEXT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 90, -1));

        jCheckBox1.setText("Painting 1");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(237, 248, 87, -1));

        jCheckBox2.setText("Painting 2");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(595, 248, 87, -1));

        jCheckBox3.setText("Painting 3");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 499, 87, -1));

        jCheckBox4.setText("Painting 4");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(594, 499, 87, -1));

        jCheckBox5.setText("Painting 5");
        jCheckBox5.setToolTipText("");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox5, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 744, 87, -1));

        jCheckBox6.setText("Painting 6");
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox6, new org.netbeans.lib.awtextra.AbsoluteConstraints(588, 744, 87, -1));

        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("GRID");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 650, 90, -1));

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("CHART");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 700, 100, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\maria\\OneDrive\\Pictures\\Saved Pictures\\white-elegant-texture-background-theme_23-2148415644 [MConverter.eu].png")); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents
 Painting painting, secondshape, thirdshape, forthsape, fifthshape, sixthshape;
    ArrayList<Individual> shapes, second, third, forth, fifth, sixth, firstparent, secondparent, firstchild, secondchild;
    Individual shape;
    ArrayList<Painting> paintings, newpaintings, newpaintings2, newgeneration;
    Random random = new Random();
    int grades = 0, limit = 100;
    int halftime = limit / 2;
    Shape_method triangle = new Shape_method();

    Creation_of_new_paintings creation = new Creation_of_new_paintings();


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        firstparent = new ArrayList<Individual>();
        secondparent = new ArrayList<Individual>();
        paintings = new ArrayList<Painting>(limit);
        newpaintings = new ArrayList<Painting>(limit);
        newpaintings2 = new ArrayList<Painting>(limit);
        newgeneration = new ArrayList<Painting>(limit);
        for (int i = 0; i < limit; i++) {
            paintings.add(new Painting(grades));

        }
        for (int i = 0; i < 100; i++) {
            shapes = paintings.get(i).getShapes();
            paintings.get(i).setGrades(creation.fittness(shapes));
            //System.out.println("gardes " + paintings.get(i).getGrades());
        }

         Graphics g = jPanel1.getGraphics();
            Graphics g1 = jPanel2.getGraphics();
            Graphics g2 = jPanel3.getGraphics();
            Graphics g3 = jPanel4.getGraphics();
            Graphics g4 = jPanel5.getGraphics();
            Graphics g5 = jPanel6.getGraphics();
            Graphics2D G1 = (Graphics2D) g;
            Graphics2D G2 = (Graphics2D) g1;
            Graphics2D G3 = (Graphics2D) g2;
            Graphics2D G4 = (Graphics2D) g3;
            Graphics2D G5 = (Graphics2D) g4;
            Graphics2D G6 = (Graphics2D) g5;
            painting = paintings.get(0);
            shapes = painting.getShapes();
            second = paintings.get(1).getShapes();
            third = paintings.get(2).getShapes();
            forth = paintings.get(3).getShapes();
            fifth = paintings.get(4).getShapes();
            sixth = paintings.get(5).getShapes();

            for (int i = 0; i < 6; i++) {
                switch (shapes.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G1.create();
                        creation.colorCenerator(gRect, shapes.get(i).getColor());
                        gRect.setStroke(new BasicStroke(shapes.get(i).getThickness()));
                        gRect.drawRect(shapes.get(i).getX(), shapes.get(i).getY(), shapes.get(i).getHeight(), shapes.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G1.create();
                        creation.colorCenerator(gOval, shapes.get(i).getColor());
                        gOval.setStroke(new BasicStroke(shapes.get(i).getThickness()));
                        gOval.drawOval(shapes.get(i).getX(), shapes.get(i).getY(), shapes.get(i).getHeight(), shapes.get(i).getLength());

                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G1.create();
                        creation.colorCenerator(gTriangle, shapes.get(i).getColor());
                        gTriangle.setStroke(new BasicStroke(shapes.get(i).getThickness()));
                        triangle.drawTraingle(gTriangle, shapes.get(i).getX(), shapes.get(i).getY(), shapes.get(i).getHeight(), shapes.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
            for (int i = 0; i < 6; i++) {
                switch (second.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G2.create();
                        gRect.setStroke(new BasicStroke(second.get(i).getThickness()));
                        creation.colorCenerator(gRect, second.get(i).getColor());
                        gRect.drawRect(second.get(i).getX(), second.get(i).getY(), second.get(i).getHeight(), second.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G2.create();
                        gOval.setStroke(new BasicStroke(second.get(i).getThickness()));
                        creation.colorCenerator(gOval, second.get(i).getColor());
                        gOval.drawOval(second.get(i).getX(), second.get(i).getY(), second.get(i).getHeight(), second.get(i).getLength());
                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G2.create();
                        gTriangle.setStroke(new BasicStroke(second.get(i).getThickness()));
                        creation.colorCenerator(gTriangle, second.get(i).getColor());
                        triangle.drawTraingle(gTriangle, second.get(i).getX(), second.get(i).getY(), second.get(i).getHeight(), second.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
            for (int i = 0; i < 6; i++) {
                switch (third.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G3.create();
                        gRect.setStroke(new BasicStroke(third.get(i).getThickness()));
                        creation.colorCenerator(gRect, third.get(i).getColor());
                        gRect.drawRect(third.get(i).getX(), third.get(i).getY(), third.get(i).getHeight(), third.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G3.create();
                        gOval.setStroke(new BasicStroke(third.get(i).getThickness()));
                        creation.colorCenerator(gOval, third.get(i).getColor());
                        gOval.drawOval(third.get(i).getX(), third.get(i).getY(), third.get(i).getHeight(), third.get(i).getLength());
                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G3.create();
                        gTriangle.setStroke(new BasicStroke(third.get(i).getThickness()));
                        creation.colorCenerator(gTriangle, third.get(i).getColor());
                        triangle.drawTraingle(gTriangle, third.get(i).getX(), third.get(i).getY(), third.get(i).getHeight(), third.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
            for (int i = 0; i < 6; i++) {
                switch (forth.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G4.create();
                        gRect.setStroke(new BasicStroke(forth.get(i).getThickness()));
                        creation.colorCenerator(gRect, forth.get(i).getColor());
                        gRect.drawRect(forth.get(i).getX(), forth.get(i).getY(), forth.get(i).getHeight(), forth.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G4.create();
                        gOval.setStroke(new BasicStroke(forth.get(i).getThickness()));
                        creation.colorCenerator(gOval, forth.get(i).getColor());
                        gOval.drawOval(forth.get(i).getX(), forth.get(i).getY(), forth.get(i).getHeight(), forth.get(i).getLength());
                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G4.create();
                        gTriangle.setStroke(new BasicStroke(forth.get(i).getThickness()));
                        creation.colorCenerator(gTriangle, forth.get(i).getColor());
                        triangle.drawTraingle(gTriangle, forth.get(i).getX(), forth.get(i).getY(), forth.get(i).getHeight(), forth.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
            for (int i = 0; i < 6; i++) {
                switch (fifth.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G5.create();
                        gRect.setStroke(new BasicStroke(fifth.get(i).getThickness()));
                        creation.colorCenerator(gRect, fifth.get(i).getColor());
                        gRect.drawRect(fifth.get(i).getX(), fifth.get(i).getY(), fifth.get(i).getHeight(), fifth.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G5.create();
                        gOval.setStroke(new BasicStroke(fifth.get(i).getThickness()));
                        creation.colorCenerator(gOval, fifth.get(i).getColor());
                        gOval.drawOval(fifth.get(i).getX(), fifth.get(i).getY(), fifth.get(i).getHeight(), fifth.get(i).getLength());
                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G5.create();
                        gTriangle.setStroke(new BasicStroke(fifth.get(i).getThickness()));
                        creation.colorCenerator(gTriangle, fifth.get(i).getColor());
                        triangle.drawTraingle(gTriangle, fifth.get(i).getX(), fifth.get(i).getY(), fifth.get(i).getHeight(), fifth.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
            for (int i = 0; i < 6; i++) {
                switch (sixth.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G6.create();
                        gRect.setStroke(new BasicStroke(sixth.get(i).getThickness()));
                        creation.colorCenerator(gRect, sixth.get(i).getColor());
                        gRect.drawRect(sixth.get(i).getX(), sixth.get(i).getY(), sixth.get(i).getHeight(), sixth.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G6.create();
                        gOval.setStroke(new BasicStroke(sixth.get(i).getThickness()));
                        creation.colorCenerator(gOval, sixth.get(i).getColor());
                        gOval.drawOval(sixth.get(i).getX(), sixth.get(i).getY(), sixth.get(i).getHeight(), sixth.get(i).getLength());
                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G6.create();
                        gTriangle.setStroke(new BasicStroke(sixth.get(i).getThickness()));
                        creation.colorCenerator(gTriangle, sixth.get(i).getColor());
                        triangle.drawTraingle(gTriangle, sixth.get(i).getX(), sixth.get(i).getY(), sixth.get(i).getHeight(), sixth.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
        

    }//GEN-LAST:event_jButton1ActionPerformed


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        repaint();
        System.out.println(jPanel1.getHeight() + " " + jPanel1.getWidth());
        System.out.println(jPanel2.getHeight() + " " + jPanel2.getWidth());
        System.out.println(jPanel3.getHeight() + " " + jPanel3.getWidth());
        System.out.println(jPanel4.getHeight() + " " + jPanel4.getWidth());
        System.out.println(jPanel5.getHeight() + " " + jPanel5.getWidth());
        System.out.println(jPanel6.getHeight() + " " + jPanel6.getWidth());


    }//GEN-LAST:event_jButton2ActionPerformed

    int max;
    int count = 0;
    int bestindex = 0;

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
        jCheckBox5.setSelected(false);
        jCheckBox6.setSelected(false);
        if (paintings == null) {
            System.out.println("Nu exista generatie de inceput");
        } else {

            int k = 0;
            while (k < 1000) {

                k++;

                firstparent = new ArrayList<>();
                secondparent = new ArrayList<>();
                firstchild = new ArrayList<>();
                secondchild = new ArrayList<>();
                newpaintings.clear();
                newpaintings2.clear();

                for (int i = 0; i < 100; i++) {
                    newpaintings.add(new Painting(grades));
                    newpaintings2.add(new Painting(grades));

                }
                creation.bubbleSort(paintings);

                System.out.println("first garde :" + paintings.get(0).getGrades());

                for (int i = 0; i < 100; i++) {
                    shapes = paintings.get(i).getShapes();
//                System.out.println("paitning :" + i);
//                for (int j = 0; j < 6; j++) {
//                    System.out.print("  " + shapes.get(j).getHeight());
//                }
//                System.out.println(" \n");
                }

                for (int i = 0; i < 50; i++) {
                    firstparent.clear();
                    firstparent.addAll(creation.selection(paintings));

//                for (int j = 0; j < 6; j++) {
//                    System.out.print(firstparent.get(j).getHeight() + "  ");
//                }
//                System.out.println(" \n");
                    secondparent.clear();
                    secondparent.addAll(creation.selection(paintings));

//                for (int j = 0; j < 6; j++) {
//                    System.out.print(secondparent.get(j).getHeight() + "  ");
//                }
//                System.out.println(" \n");
                    shapes = newpaintings.get(i).getShapes();

                    creation.crossover(firstparent, secondparent, firstchild);
                    creation.mutation(firstchild);
                    //  System.out.println("Paitning " + i);
                    for (int j = 0; j < 6; j++) {
                        //System.out.println("child1 " + firstchild.get(j).getHeight());
                        shapes.get(j).setHeight(firstchild.get(j).getHeight());
                        shapes.get(j).setHeight(firstchild.get(j).getHeight());
                        shapes.get(j).setLength(firstchild.get(j).getLength());
                        shapes.get(j).setX(firstchild.get(j).getX());
                        shapes.get(j).setY(firstchild.get(j).getY());
                        shapes.get(j).setSelector(firstchild.get(j).getSelector());
                        shapes.get(j).setThickness(firstchild.get(j).getThickness());
                        shapes.get(j).setColor(firstchild.get(j).getColor());

                    }

                    second = newpaintings2.get(i).getShapes();
                    creation.crossover2(firstparent, secondparent, secondchild);
                    creation.mutation(secondchild);
                    for (int j = 0; j < 6; j++) {
                        // System.out.println("child2 " + secondchild.get(j).getHeight());
                        second.get(j).setHeight(secondchild.get(j).getHeight());
                        second.get(j).setLength(secondchild.get(j).getLength());
                        second.get(j).setX(secondchild.get(j).getX());
                        second.get(j).setY(secondchild.get(j).getY());
                        second.get(j).setSelector(secondchild.get(j).getSelector());
                        second.get(j).setThickness(secondchild.get(j).getThickness());
                        second.get(j).setColor(secondchild.get(j).getColor());

                    }

                    //System.out.println("with garde " + paintings.get(i).getGrades());
                }

                paintings.clear();
                paintings.addAll(newpaintings.subList(0, limit / 2));
                paintings.addAll(newpaintings2.subList(0, limit / 2));
                for (int i = 0; i < 100; i++) {
                    shapes = paintings.get(i).getShapes();
                    paintings.get(i).setGrades(creation.fittness(shapes));
                }

//            for (int i = 0; i < 100; i++) {
//                second = paintings.get(i).getShapes();
//                System.out.print("New painting from paitnings  " + i);
//                for (int j = 0; j < 6; j++) {
//                    System.out.print(" " + second.get(j).getHeight() + " ");
//                }
//                System.out.print("\n");
//            }
            }

            creation.bubbleSort(paintings);
//            for (int i = 0; i < 100; i++) {
//                second = paintings.get(i).getShapes();
//                System.out.println("gardes " + paintings.get(i).getGrades());
//                System.out.print("Paitning 99  " + i);
//                for (int j = 0; j < 6; j++) {
//                    System.out.print(" height: " + second.get(j).getHeight() + " ");
//                    System.out.print(" length : " + second.get(j).getLength() + " ");
//                    System.out.print("  x: " + second.get(j).getX() + " ");
//                    System.out.print(" y: " + second.get(j).getY() + " ");
//                    System.out.print(" selector: " + second.get(j).getSelector() + " ");
//                    System.out.print(" thicknes: " + second.get(j).getThickness() + " ");
//                    System.out.print(" color: " + second.get(j).getColor() + " ");
//                }
//                System.out.print("\n");
//            }

            Graphics g = jPanel1.getGraphics();
            Graphics g1 = jPanel2.getGraphics();
            Graphics g2 = jPanel3.getGraphics();
            Graphics g3 = jPanel4.getGraphics();
            Graphics g4 = jPanel5.getGraphics();
            Graphics g5 = jPanel6.getGraphics();
            Graphics2D G1 = (Graphics2D) g;
            Graphics2D G2 = (Graphics2D) g1;
            Graphics2D G3 = (Graphics2D) g2;
            Graphics2D G4 = (Graphics2D) g3;
            Graphics2D G5 = (Graphics2D) g4;
            Graphics2D G6 = (Graphics2D) g5;
            painting = paintings.get(0);
            shapes = painting.getShapes();
            second = paintings.get(1).getShapes();
            third = paintings.get(2).getShapes();
            forth = paintings.get(3).getShapes();
            fifth = paintings.get(4).getShapes();
            sixth = paintings.get(5).getShapes();

            for (int i = 0; i < 6; i++) {
                switch (shapes.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G1.create();
                        creation.colorCenerator(gRect, shapes.get(i).getColor());
                        gRect.setStroke(new BasicStroke(shapes.get(i).getThickness()));
                        gRect.drawRect(shapes.get(i).getX(), shapes.get(i).getY(), shapes.get(i).getHeight(), shapes.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G1.create();
                        creation.colorCenerator(gOval, shapes.get(i).getColor());
                        gOval.setStroke(new BasicStroke(shapes.get(i).getThickness()));
                        gOval.drawOval(shapes.get(i).getX(), shapes.get(i).getY(), shapes.get(i).getHeight(), shapes.get(i).getLength());

                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G1.create();
                        creation.colorCenerator(gTriangle, shapes.get(i).getColor());
                        gTriangle.setStroke(new BasicStroke(shapes.get(i).getThickness()));
                        triangle.drawTraingle(gTriangle, shapes.get(i).getX(), shapes.get(i).getY(), shapes.get(i).getHeight(), shapes.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
            for (int i = 0; i < 6; i++) {
                switch (second.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G2.create();
                        gRect.setStroke(new BasicStroke(second.get(i).getThickness()));
                        creation.colorCenerator(gRect, second.get(i).getColor());
                        gRect.drawRect(second.get(i).getX(), second.get(i).getY(), second.get(i).getHeight(), second.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G2.create();
                        gOval.setStroke(new BasicStroke(second.get(i).getThickness()));
                        creation.colorCenerator(gOval, second.get(i).getColor());
                        gOval.drawOval(second.get(i).getX(), second.get(i).getY(), second.get(i).getHeight(), second.get(i).getLength());
                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G2.create();
                        gTriangle.setStroke(new BasicStroke(second.get(i).getThickness()));
                        creation.colorCenerator(gTriangle, second.get(i).getColor());
                        triangle.drawTraingle(gTriangle, second.get(i).getX(), second.get(i).getY(), second.get(i).getHeight(), second.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
            for (int i = 0; i < 6; i++) {
                switch (third.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G3.create();
                        gRect.setStroke(new BasicStroke(third.get(i).getThickness()));
                        creation.colorCenerator(gRect, third.get(i).getColor());
                        gRect.drawRect(third.get(i).getX(), third.get(i).getY(), third.get(i).getHeight(), third.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G3.create();
                        gOval.setStroke(new BasicStroke(third.get(i).getThickness()));
                        creation.colorCenerator(gOval, third.get(i).getColor());
                        gOval.drawOval(third.get(i).getX(), third.get(i).getY(), third.get(i).getHeight(), third.get(i).getLength());
                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G3.create();
                        gTriangle.setStroke(new BasicStroke(third.get(i).getThickness()));
                        creation.colorCenerator(gTriangle, third.get(i).getColor());
                        triangle.drawTraingle(gTriangle, third.get(i).getX(), third.get(i).getY(), third.get(i).getHeight(), third.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
            for (int i = 0; i < 6; i++) {
                switch (forth.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G4.create();
                        gRect.setStroke(new BasicStroke(forth.get(i).getThickness()));
                        creation.colorCenerator(gRect, forth.get(i).getColor());
                        gRect.drawRect(forth.get(i).getX(), forth.get(i).getY(), forth.get(i).getHeight(), forth.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G4.create();
                        gOval.setStroke(new BasicStroke(forth.get(i).getThickness()));
                        creation.colorCenerator(gOval, forth.get(i).getColor());
                        gOval.drawOval(forth.get(i).getX(), forth.get(i).getY(), forth.get(i).getHeight(), forth.get(i).getLength());
                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G4.create();
                        gTriangle.setStroke(new BasicStroke(forth.get(i).getThickness()));
                        creation.colorCenerator(gTriangle, forth.get(i).getColor());
                        triangle.drawTraingle(gTriangle, forth.get(i).getX(), forth.get(i).getY(), forth.get(i).getHeight(), forth.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
            for (int i = 0; i < 6; i++) {
                switch (fifth.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G5.create();
                        gRect.setStroke(new BasicStroke(fifth.get(i).getThickness()));
                        creation.colorCenerator(gRect, fifth.get(i).getColor());
                        gRect.drawRect(fifth.get(i).getX(), fifth.get(i).getY(), fifth.get(i).getHeight(), fifth.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G5.create();
                        gOval.setStroke(new BasicStroke(fifth.get(i).getThickness()));
                        creation.colorCenerator(gOval, fifth.get(i).getColor());
                        gOval.drawOval(fifth.get(i).getX(), fifth.get(i).getY(), fifth.get(i).getHeight(), fifth.get(i).getLength());
                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G5.create();
                        gTriangle.setStroke(new BasicStroke(fifth.get(i).getThickness()));
                        creation.colorCenerator(gTriangle, fifth.get(i).getColor());
                        triangle.drawTraingle(gTriangle, fifth.get(i).getX(), fifth.get(i).getY(), fifth.get(i).getHeight(), fifth.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
            for (int i = 0; i < 6; i++) {
                switch (sixth.get(i).getSelector()) {
                    case 0:
                        Graphics2D gRect = (Graphics2D) G6.create();
                        gRect.setStroke(new BasicStroke(sixth.get(i).getThickness()));
                        creation.colorCenerator(gRect, sixth.get(i).getColor());
                        gRect.drawRect(sixth.get(i).getX(), sixth.get(i).getY(), sixth.get(i).getHeight(), sixth.get(i).getLength());
                        gRect.dispose();
                        break;
                    case 1:
                        Graphics2D gOval = (Graphics2D) G6.create();
                        gOval.setStroke(new BasicStroke(sixth.get(i).getThickness()));
                        creation.colorCenerator(gOval, sixth.get(i).getColor());
                        gOval.drawOval(sixth.get(i).getX(), sixth.get(i).getY(), sixth.get(i).getHeight(), sixth.get(i).getLength());
                        gOval.dispose();
                        break;
                    case 2:
                        Graphics2D gTriangle = (Graphics2D) G6.create();
                        gTriangle.setStroke(new BasicStroke(sixth.get(i).getThickness()));
                        creation.colorCenerator(gTriangle, sixth.get(i).getColor());
                        triangle.drawTraingle(gTriangle, sixth.get(i).getX(), sixth.get(i).getY(), sixth.get(i).getHeight(), sixth.get(i).getLength());
                        gTriangle.dispose();
                        break;
                }
            }
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            System.out.println("gardes " + paintings.get(0).getGrades());
            paintings.get(0).setGrades(paintings.get(0).getGrades() + 20);
            System.out.println("gardes+10 " + paintings.get(0).getGrades());
        } else {
            System.out.println("gardes " + paintings.get(0).getGrades());
            paintings.get(0).setGrades(paintings.get(0).getGrades() - 20);
            System.out.println("gardes+10 " + paintings.get(0).getGrades());
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox2.isSelected()) {
            System.out.println("gardes" + paintings.get(1).getGrades());
            paintings.get(1).setGrades(paintings.get(1).getGrades() + 20);
            System.out.println("gardes+10" + paintings.get(1).getGrades());
        } else {
            System.out.println("gardes" + paintings.get(1).getGrades());
            paintings.get(1).setGrades(paintings.get(1).getGrades() - 20);
            System.out.println("gardes+10" + paintings.get(1).getGrades());
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox3.isSelected()) {
            System.out.println("gardes" + paintings.get(2).getGrades());
            paintings.get(2).setGrades(paintings.get(2).getGrades() + 20);
            System.out.println("gardes+10" + paintings.get(2).getGrades());
        } else {
            System.out.println("gardes" + paintings.get(2).getGrades());
            paintings.get(2).setGrades(paintings.get(2).getGrades() - 20);
            System.out.println("gardes+10" + paintings.get(2).getGrades());
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox4.isSelected()) {
            System.out.println("gardes" + paintings.get(3).getGrades());
            paintings.get(3).setGrades(paintings.get(3).getGrades() + 20);
            System.out.println("gardes+10" + paintings.get(3).getGrades());
        } else {
            System.out.println("gardes" + paintings.get(3).getGrades());
            paintings.get(3).setGrades(paintings.get(3).getGrades() - 20);
            System.out.println("gardes+10" + paintings.get(3).getGrades());
        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox5.isSelected()) {
            System.out.println("gardes" + paintings.get(4).getGrades());
            paintings.get(4).setGrades(paintings.get(4).getGrades() + 20);
            System.out.println("gardes+10" + paintings.get(4).getGrades());
        } else {
            System.out.println("gardes" + paintings.get(4).getGrades());
            paintings.get(4).setGrades(paintings.get(4).getGrades() - 20);
            System.out.println("gardes+10" + paintings.get(4).getGrades());
        }
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox6.isSelected()) {
            System.out.println("gardes" + paintings.get(5).getGrades());
            paintings.get(5).setGrades(paintings.get(5).getGrades() + 20);
            System.out.println("gardes+10" + paintings.get(5).getGrades());
        } else {
            System.out.println("gardes" + paintings.get(5).getGrades());
            paintings.get(5).setGrades(paintings.get(5).getGrades() - 20);
            System.out.println("gardes+10" + paintings.get(5).getGrades());
        }
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        Graphics g = jPanel1.getGraphics();
        Graphics g1 = jPanel2.getGraphics();
        Graphics g2 = jPanel3.getGraphics();
        Graphics g3 = jPanel4.getGraphics();
        Graphics g4 = jPanel5.getGraphics();
        Graphics g5 = jPanel6.getGraphics();
        int panelWidth = jPanel1.getWidth();
        int panelHeight = jPanel1.getHeight();

        int cellWidth = panelWidth / 3;
        int cellHeight = panelHeight / 3;

        double x1 = cellWidth * 2;
        double y1 = 0;
        double x2 = cellWidth * 2;
        double y2 = panelHeight;
        double x3 = 0;
        double y3 = cellHeight;
        double x4 = panelWidth;
        double y4 = cellHeight;
        Shape_method intersection = new Shape_method();
        intersection.intersetcion(x1, y1, x2, y2, x3, y3, x4, y4);
        g.setColor(Color.white);
        g.fillOval(100 - 8 / 2, 71 - 8 / 2, 8, 8);
        g.fillOval(100 - 8 / 2, 142 - 8 / 2, 8, 8);
        g.fillOval(200 - 8 / 2, 71 - 8 / 2, 8, 8);
        g.fillOval(200 - 8 / 2, 142 - 8 / 2, 8, 8);
        g.drawLine(cellWidth, 0, cellWidth, panelHeight);
        g.drawLine(cellWidth * 2, 0, cellWidth * 2, panelHeight);
        g.drawLine(0, cellHeight, panelWidth, cellHeight);
        g.drawLine(0, cellHeight * 2, panelWidth, cellHeight * 2);

        g1.setColor(Color.white);
        g1.fillOval(100 - 8 / 2, 71 - 8 / 2, 8, 8);
        g1.fillOval(100 - 8 / 2, 142 - 8 / 2, 8, 8);
        g1.fillOval(200 - 8 / 2, 71 - 8 / 2, 8, 8);
        g1.fillOval(200 - 8 / 2, 142 - 8 / 2, 8, 8);
        g1.drawLine(cellWidth, 0, cellWidth, panelHeight);
        g1.drawLine(cellWidth * 2, 0, cellWidth * 2, panelHeight);
        g1.drawLine(0, cellHeight, panelWidth, cellHeight);
        g1.drawLine(0, cellHeight * 2, panelWidth, cellHeight * 2);
        g2.setColor(Color.white);
        g2.fillOval(100 - 8 / 2, 71 - 8 / 2, 8, 8);
        g2.fillOval(100 - 8 / 2, 142 - 8 / 2, 8, 8);
        g2.fillOval(200 - 8 / 2, 71 - 8 / 2, 8, 8);
        g2.fillOval(200 - 8 / 2, 142 - 8 / 2, 8, 8);
        g2.drawLine(cellWidth, 0, cellWidth, panelHeight);
        g2.drawLine(cellWidth * 2, 0, cellWidth * 2, panelHeight);
        g2.drawLine(0, cellHeight, panelWidth, cellHeight);
        g2.drawLine(0, cellHeight * 2, panelWidth, cellHeight * 2);
        g3.setColor(Color.white);
        g3.fillOval(100 - 8 / 2, 71 - 8 / 2, 8, 8);
        g3.fillOval(100 - 8 / 2, 142 - 8 / 2, 8, 8);
        g3.fillOval(200 - 8 / 2, 71 - 8 / 2, 8, 8);
        g3.fillOval(200 - 8 / 2, 142 - 8 / 2, 8, 8);
        g3.drawLine(cellWidth, 0, cellWidth, panelHeight);
        g3.drawLine(cellWidth * 2, 0, cellWidth * 2, panelHeight);
        g3.drawLine(0, cellHeight, panelWidth, cellHeight);
        g3.drawLine(0, cellHeight * 2, panelWidth, cellHeight * 2);
        g4.setColor(Color.white);
        g4.fillOval(100 - 8 / 2, 71 - 8 / 2, 8, 8);
        g4.fillOval(100 - 8 / 2, 142 - 8 / 2, 8, 8);
        g4.fillOval(200 - 8 / 2, 71 - 8 / 2, 8, 8);
        g4.fillOval(200 - 8 / 2, 142 - 8 / 2, 8, 8);
        g4.drawLine(cellWidth, 0, cellWidth, panelHeight);
        g4.drawLine(cellWidth * 2, 0, cellWidth * 2, panelHeight);
        g4.drawLine(0, cellHeight, panelWidth, cellHeight);
        g4.drawLine(0, cellHeight * 2, panelWidth, cellHeight * 2);
        g5.setColor(Color.white);
        g5.fillOval(100 - 8 / 2, 71 - 8 / 2, 8, 8);
        g5.fillOval(100 - 8 / 2, 142 - 8 / 2, 8, 8);
        g5.fillOval(200 - 8 / 2, 71 - 8 / 2, 8, 8);
        g5.fillOval(200 - 8 / 2, 142 - 8 / 2, 8, 8);
        g5.drawLine(cellWidth, 0, cellWidth, panelHeight);
        g5.drawLine(cellWidth * 2, 0, cellWidth * 2, panelHeight);
        g5.drawLine(0, cellHeight, panelWidth, cellHeight);
        g5.drawLine(0, cellHeight * 2, panelWidth, cellHeight * 2);

        int centerofGravityX = shapes.get(5).getX() + shapes.get(5).getHeight() / 2;
        int centerofGravityY = shapes.get(5).getY() + shapes.get(5).getLength() / 2;
        g.setColor(Color.red);
        g.fillOval(centerofGravityX - 8 / 2, centerofGravityY - 8 / 2, 8, 8);

        centerofGravityX = second.get(5).getX() + second.get(5).getHeight() / 2;
        centerofGravityY = second.get(5).getY() + second.get(5).getLength() / 2;
        g1.setColor(Color.red);
        g1.fillOval(centerofGravityX - 8 / 2, centerofGravityY - 8 / 2, 8, 8);
        centerofGravityX = third.get(5).getX() + third.get(5).getHeight() / 2;
        centerofGravityY = third.get(5).getY() + third.get(5).getLength() / 2;
        g2.setColor(Color.red);
        g2.fillOval(centerofGravityX - 8 / 2, centerofGravityY - 8 / 2, 8, 8);
        centerofGravityX = forth.get(5).getX() + forth.get(5).getHeight() / 2;
        centerofGravityY = forth.get(5).getY() + forth.get(5).getLength() / 2;
        g3.setColor(Color.red);
        g3.fillOval(centerofGravityX - 8 / 2, centerofGravityY - 8 / 2, 8, 8);
        centerofGravityX = fifth.get(5).getX() + fifth.get(5).getHeight() / 2;
        centerofGravityY = fifth.get(5).getY() + fifth.get(5).getLength() / 2;
        g4.setColor(Color.red);
        g4.fillOval(centerofGravityX - 8 / 2, centerofGravityY - 8 / 2, 8, 8);
        centerofGravityX = sixth.get(5).getX() + sixth.get(5).getHeight() / 2;
        centerofGravityY = sixth.get(5).getY() + sixth.get(5).getLength() / 2;
        g5.setColor(Color.red);
        g5.fillOval(centerofGravityX - 8 / 2, centerofGravityY - 8 / 2, 8, 8);
    }//GEN-LAST:event_jButton4ActionPerformed

    private double mean;
    private double standardDeviation;
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Shape_method deviation = new Shape_method();

        mean = deviation.calculateMean(paintings);
        standardDeviation = deviation.calculateStandardDeviation(paintings);

        JPanel panel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;

                double minX = mean - (3 * standardDeviation);
                double maxX = mean + (3 * standardDeviation);

                double amplitude = 800 / 2;
                int numPoints = 400; // Adjust the number of points as desired
                double interval = (maxX - minX) / numPoints;

                Path2D path = new Path2D.Double();
                path.moveTo(0, amplitude);

                for (double x = minX; x <= maxX; x += interval) {
                    double gaussianValue = deviation.gaussian(x, mean, amplitude, standardDeviation);
                    double xPos = (x - minX) * (numPoints / (maxX - minX));
                    double yPos = amplitude - gaussianValue;
                    path.lineTo(xPos, yPos);
                }

                path.lineTo(numPoints, amplitude);
                g2d.setColor(Color.BLUE);
                g2d.fill(path);

                // Draw x-axis
                g2d.setColor(Color.BLACK);
                g2d.drawLine(0, (int) amplitude, numPoints, (int) amplitude);
                g2d.drawString("X-axis", numPoints - 50, (int) amplitude + 20);

                // Draw y-axis
                g2d.drawLine((int) (-minX * (numPoints / (maxX - minX))), 0,
                        (int) (-minX * (numPoints / (maxX - minX))), (int) amplitude * 2);
                g2d.drawString("Y-axis", (int) (-minX * (numPoints / (maxX - minX))) - 40, 20);

                // Draw tick marks and labels on x-axis
                g2d.setColor(Color.BLACK);
                for (int i = 0; i <= 80; i += 10) {
                    int xTick = (int) ((numPoints / 80.0) * i);
                    g2d.drawLine(xTick, (int) amplitude - 5, xTick, (int) amplitude + 5);
                    g2d.drawString(Integer.toString(i), xTick - 10, (int) amplitude + 20);
                }

                // Draw tick marks and labels on y-axis
                for (int i = 0; i <= 100; i += 10) {
                    int yTick = (int) (amplitude - ((amplitude * i) / 100.0));
                    g2d.drawLine((int) (-minX * (numPoints / (maxX - minX))), yTick,
                            (int) (-minX * (numPoints / (maxX - minX))) + 5, yTick);
                    g2d.drawString(Integer.toString(i), (int) (-minX * (numPoints / (maxX - minX))) - 40, yTick + 5);
                }

                // Draw sample points on the curve
                g2d.setColor(Color.RED);
                for (double x = minX; x <= maxX; x += interval * 20) {
                    double gaussianValue = deviation.gaussian(x, mean, amplitude, standardDeviation);
                    double xPos = (x - minX) * (numPoints / (maxX - minX));
                    double yPos = amplitude - gaussianValue;
                    g2d.fillOval((int) xPos - 2, (int) yPos - 2, 4, 4);
                }
            }
        };

        JFrame frame = new JFrame("Genetic Algorithm Standard Deviation Chart");
        frame.setContentPane(panel);
        frame.setSize(800, 600);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setVisible(true);


    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Canvas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Canvas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Canvas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Canvas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Canvas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    // End of variables declaration//GEN-END:variables
}
